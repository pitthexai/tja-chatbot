{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/ngl18/Documents/Projects/HexAI/tja-chatbot/arthrobot/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/ngl18/Documents/Projects/HexAI/tja-chatbot/arthrobot/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md px-3 py-1 text-base shadow transition-all file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-blue-600 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,sMAAM,UAAU,CAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sUACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/ngl18/Documents/Projects/HexAI/tja-chatbot/arthrobot/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AAEA;AAEA;AAHA;;;;;;AAKA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,ySACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,sMAAM,UAAU,CAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["file:///Users/ngl18/Documents/Projects/HexAI/tja-chatbot/arthrobot/src/app/chat/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useSearchParams } from \"next/navigation\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Send } from \"lucide-react\";\n\n// Helper function to generate unique IDs for messages.\nconst generateUniqueId = () =>\n  `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n\ninterface Message {\n  id: string;\n  text: string;\n  sender: \"user\" | \"bot\";\n}\n\ninterface Abstract {\n  id: number;\n  title: string;\n  content: string;\n}\n\nconst ChatPage = () => {\n  // Extract the initial query from the URL (e.g., ?initial=...)\n  const searchParams = useSearchParams();\n  const initialQuestion = searchParams.get(\"initial\") || \"\";\n\n  const [chatInput, setChatInput] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [abstracts, setAbstracts] = useState<Abstract[]>([]);\n\n  // Function to add a message and simulate a bot response along with article abstract retrieval.\n  const initiateChat = (question: string) => {\n    // Add the user's message.\n    const userMessage: Message = {\n      id: generateUniqueId(),\n      text: question,\n      sender: \"user\",\n    };\n    setMessages((prev) => [...prev, userMessage]);\n\n    // Simulate a bot response and retrieval of article abstracts.\n    setTimeout(() => {\n      const botMessage: Message = {\n        id: generateUniqueId(),\n        text: \"This is a simulated bot response based on your query.\",\n        sender: \"bot\",\n      };\n      setMessages((prev) => [...prev, botMessage]);\n\n      // Simulated abstracts data (replace with your RAG service call)\n      const simulatedAbstracts: Abstract[] = [\n        {\n          id: 1,\n          title: \"Abstract 1: Recent Advances in Arthroplasty\",\n          content:\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus imperdiet...\",\n        },\n        {\n          id: 2,\n          title: \"Abstract 2: Impact of Robotics in Joint Replacement\",\n          content:\n            \"Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis...\",\n        },\n      ];\n      setAbstracts(simulatedAbstracts);\n    }, 1000);\n  };\n\n  // Clear previous chat history and automatically initiate the chat if an initial query exists.\n  useEffect(() => {\n    setMessages([]);\n    if (initialQuestion) {\n      initiateChat(initialQuestion);\n    }\n  }, [initialQuestion]);\n\n  // Handler for sending additional messages.\n  const handleSend = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!chatInput.trim()) return;\n    initiateChat(chatInput);\n    setChatInput(\"\");\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Left Panel: Chat Interface */}\n      <div className=\"flex flex-col flex-1 border-r border-gray-300 bg-white shadow-sm\">\n        {/* Simplified Professional Header */}\n        <div className=\"p-4 border-b border-gray-300 bg-white\">\n          <h2 className=\"text-xl font-semibold text-center text-gray-800\">\n            ArthroBot Chat\n          </h2>\n        </div>\n        {/* Chat Messages */}\n        <div className=\"flex-1 p-6 overflow-y-auto space-y-4 bg-gray-50\">\n          {messages.length === 0 ? (\n            <p className=\"text-gray-500 text-center\">\n              Your conversation will appear here...\n            </p>\n          ) : (\n            messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex ${\n                  message.sender === \"user\" ? \"justify-end\" : \"justify-start\"\n                }`}\n              >\n                <div\n                  className={`max-w-md p-4 rounded-md border ${\n                    message.sender === \"user\"\n                      ? \"bg-blue-50 border-blue-200 text-gray-800\"\n                      : \"bg-gray-100 border-gray-200 text-gray-700\"\n                  }`}\n                >\n                  {message.text}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n        {/* Message Input */}\n        <form onSubmit={handleSend} className=\"flex p-4 border-t border-gray-300 bg-white\">\n          <Input\n            value={chatInput}\n            onChange={(e) => setChatInput(e.target.value)}\n            placeholder=\"Type your message...\"\n            className=\"flex-1 p-3 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-400\"\n          />\n          <Button\n            type=\"submit\"\n            className=\"p-3 rounded-r-md bg-blue-600 text-white hover:bg-blue-700 transition-colors\"\n          >\n            <Send className=\"w-5 h-5\" />\n          </Button>\n        </form>\n      </div>\n      {/* Right Panel: Article Abstracts */}\n      <div className=\"flex flex-col flex-1 p-6 overflow-y-auto bg-gray-100\">\n        <h2 className=\"text-2xl font-semibold text-center text-gray-800 mb-4\">\n          Article Abstracts\n        </h2>\n        {abstracts.length === 0 ? (\n          <p className=\"text-gray-500 text-center\">\n            Abstracts will be displayed here based on your query...\n          </p>\n        ) : (\n          abstracts.map((abstract) => (\n            <div\n              key={abstract.id}\n              className=\"mb-4 p-4 bg-white rounded-md shadow-sm border border-gray-200\"\n            >\n              <h3 className=\"text-lg font-medium text-gray-800 mb-2\">\n                {abstract.title}\n              </h3>\n              <p className=\"text-gray-600\">{abstract.content}</p>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}